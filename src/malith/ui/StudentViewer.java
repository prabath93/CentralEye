package malith.ui;

import chanaka.dao.StudentDAO;
import chanaka.data.Student;
import chanaka.gui.AddOrEditStudent;
import chanaka.gui.Certificate;
import com.jtattoo.plaf.acryl.AcrylLookAndFeel;
import common.DbConnector;

import java.io.IOException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import prabath.data.Teacher;

/**
 *
 * @author Malith - malith.13@cse.mrt.ac.lk
 */
public class StudentViewer extends javax.swing.JFrame {

    DbConnector dbConnector;
    StudentDAO studentDAO;
    int accessPriviledge;
    Teacher teacher;

    /**
     * Creates new form ContactsBook
     *
     * @param accessPriviledge
     */
    public StudentViewer(int accessPriviledge) {

        initComponents();
        setLocationRelativeTo(null);
        jDateChooser1.setVisible(false);
        this.accessPriviledge = accessPriviledge;
        try {
            // create the central DAO
            dbConnector = new DbConnector();
            // make a DAO for Student class by sending in the DB Connection from dbConnector
            studentDAO = new StudentDAO(dbConnector.getMyConn());

            // new update*****************************************************************************************************by Malith
            btnSearch.doClick();

        } catch (IOException | SQLException ex) {
            JOptionPane.showMessageDialog(StudentViewer.this, "Error:  " + ex, "Error", JOptionPane.ERROR_MESSAGE);
        }
        System.out.println("access:" + accessPriviledge);
        if (accessPriviledge == 4) {
            btnDeleteContact.setEnabled(false);
            btnNewContact.setEnabled(false);
            btnCertificate.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnNewContact = new javax.swing.JButton();
        btnUpdateContact = new javax.swing.JButton();
        btnDeleteContact = new javax.swing.JButton();
        btnCertificate = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtQuickPane = new javax.swing.JEditorPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        comboPara = new javax.swing.JComboBox();
        txtSearch = new javax.swing.JTextField();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        btnSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Central Eye");

        table.setAutoCreateRowSorter(true);
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Admission No", "Name", "DOB", "Gender"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        table.setAutoscrolls(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableMousePressed(evt);
            }
        });
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        btnNewContact.setText("Add New Student");
        btnNewContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewContactActionPerformed(evt);
            }
        });

        btnUpdateContact.setText("Update Student");
        btnUpdateContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateContactActionPerformed(evt);
            }
        });

        btnDeleteContact.setText("Delete Student");
        btnDeleteContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteContactActionPerformed(evt);
            }
        });

        btnCertificate.setText("Certificate");
        btnCertificate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCertificateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNewContact, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpdateContact, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDeleteContact)
                .addGap(28, 28, 28)
                .addComponent(btnCertificate)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNewContact)
                    .addComponent(btnUpdateContact)
                    .addComponent(btnDeleteContact)
                    .addComponent(btnCertificate))
                .addContainerGap())
        );

        txtQuickPane.setEditable(false);
        txtQuickPane.setContentType("text/html"); // NOI18N
        txtQuickPane.setToolTipText("");
        jScrollPane2.setViewportView(txtQuickPane);

        jLabel1.setText("Search by");

        comboPara.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Name", "Admission number", "Telephone", "Address", "Birth date" }));
        comboPara.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboParaItemStateChanged(evt);
            }
        });
        comboPara.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
                comboParaPopupMenuCanceled(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        comboPara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboParaActionPerformed(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("Iskoola Pota", 0, 11)); // NOI18N

        jDateChooser1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jDateChooser1MouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jDateChooser1MouseReleased(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboPara, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(comboPara, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 691, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String keyWord;
        try {
            String searchPara = comboPara.getSelectedItem().toString();

            if ("Birth date".equals(searchPara)) {

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                keyWord = sdf.format(jDateChooser1.getDate());

            } else {
                // Get keyWord to search from the text field
                keyWord = txtSearch.getText();
                // get what to search from combo box

            }
            List<Student> student = null;

            // Call DAO and get students relevent to the "searchpara"
            if (keyWord != null && keyWord.trim().length() > 0) {
                student = studentDAO.searchStudent(keyWord, searchPara);
            } else {
                // If last name is empty, then get all employees
                student = studentDAO.getAllStudent();

            }
            // when there is no search results to show, clear the table
            if (student.isEmpty()) {
                String[] columnNames = {"Admission No", "Name", "DOB", "Gender"};
                DefaultTableModel model = new DefaultTableModel(columnNames, 0);
                table.setModel(model);

                // new update*****************************************************************************************************by Malith
                String temp = "<html><font  size=\"4\" color=\"red\"><center>No records!</center></font>";
                if (keyWord != null & !"".equals(keyWord)) {
                    temp = "<html><font  size=\"4\" color=\"red\"><center>No records for \"" + keyWord + "\" under \"" + searchPara + "\"</center></font>";
                }
                txtQuickPane.setText(temp);

                return;
            }
            // create the model and update the "table"
            StudentTableModel model = new StudentTableModel(student);
            table.setModel(model);

            refreshQuicViewPanelDefault();
        } catch (Exception exc) {
            JOptionPane.showMessageDialog(StudentViewer.this, "Error: " + exc, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnNewContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewContactActionPerformed
        new AddOrEditStudent(this, rootPaneCheckingEnabled, studentDAO).setVisible(true);
        refreshGUI();
    }//GEN-LAST:event_btnNewContactActionPerformed

    private void btnUpdateContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateContactActionPerformed
        // get the selected row
        int row = table.getSelectedRow();

        //make sure a row is selected
        if (row < 0) {
            JOptionPane.showMessageDialog(StudentViewer.this, "You must select a student first!", "Selection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // get the selected current Student
        Student tempStudent = (Student) table.getValueAt(row, StudentTableModel.OBJECT_COL);

        AddOrEditStudent addOrEditStudent;
        try {
            addOrEditStudent = new AddOrEditStudent(this, rootPaneCheckingEnabled, studentDAO, tempStudent);

            if (accessPriviledge == 4) {
                System.out.println("accessPRIVILEDGE");
                addOrEditStudent.setAccessPriviledge();
                addOrEditStudent.setTeacher(teacher);
            }
            addOrEditStudent.setVisible(true);

            refreshGUI();
        } catch (IOException | SQLException ex) {
            Logger.getLogger(StudentViewer.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnUpdateContactActionPerformed

    private void btnDeleteContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteContactActionPerformed
        int row = table.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(rootPane, "You must select a student", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int response = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to delete this student details!!!", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (response != JOptionPane.YES_OPTION) {
            return;
        }

        Student tempStudent = (Student) table.getValueAt(row, StudentTableModel.OBJECT_COL);
        try {
            studentDAO.deleteStudent(tempStudent.getAdmissionNumber());
        } catch (SQLException ex) {
            Logger.getLogger(StudentViewer.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshGUI();
        JOptionPane.showMessageDialog(StudentViewer.this, "Student deleted successfully", "Student deleted", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnDeleteContactActionPerformed

    private void tableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMousePressed
        refreshQuicViewPanel();

    }//GEN-LAST:event_tableMousePressed

    private void jDateChooser1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDateChooser1MouseReleased

    }//GEN-LAST:event_jDateChooser1MouseReleased

    private void jDateChooser1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDateChooser1MouseExited

    }//GEN-LAST:event_jDateChooser1MouseExited

    private void comboParaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboParaItemStateChanged

    }//GEN-LAST:event_comboParaItemStateChanged

    private void comboParaPopupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboParaPopupMenuCanceled

    }//GEN-LAST:event_comboParaPopupMenuCanceled

    private void btnCertificateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCertificateActionPerformed

        try {
            // get the selected row
            int row = table.getSelectedRow();

            //make sure a row is selected
            if (row < 0) {
                JOptionPane.showMessageDialog(StudentViewer.this, "You must select a student first!", "Selection Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // get the selected current Student
            Student tempStudent = (Student) table.getValueAt(row, StudentTableModel.OBJECT_COL);

            new Certificate(this, rootPaneCheckingEnabled, tempStudent, dbConnector.getMyConn()).setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(StudentViewer.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnCertificateActionPerformed

    private void comboParaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboParaActionPerformed

        //when search using a birthdate, day chooser will visible
        if ("Birth date".equals(comboPara.getSelectedItem())) {
            txtSearch.setVisible(false);
            jDateChooser1.setVisible(true);
        } else {
            jDateChooser1.setVisible(false);
            txtSearch.setVisible(true);

        }
    }//GEN-LAST:event_comboParaActionPerformed

    private void tableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyReleased
        refreshQuicViewPanel();
    }//GEN-LAST:event_tableKeyReleased

    public void setTeacher(Teacher teacher) {
        this.teacher = teacher;
    }

    /**
     * method will refresh the GUI showing the latest update on the table
     *
     */
    public void refreshGUI() {
        try {
            // get all student theough the DAO to a tempory List
            List<Student> studentList = studentDAO.getAllStudent();

            // create the model and update the "table"
            StudentTableModel model = new StudentTableModel(studentList);
            table.setModel(model);
            refreshQuicViewPanelDefault();

        } catch (Exception exc) {
            JOptionPane.showMessageDialog(StudentViewer.this, "Error: " + exc, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // new update*****************************************************************************************************by Malith
    public void refreshQuicViewPanel() {
        // get the selected row
        int row = table.getSelectedRow();
        // get the current Person
        Student tempStudent = null;
        tempStudent = (Student) table.getValueAt(row, StudentTableModel.OBJECT_COL);
        // get values
        txtQuickPane.setText(tempStudent.getSummary());

    }

    // new update*****************************************************************************************************by Malith
    public void refreshQuicViewPanelDefault() {
        // get the selected row
        int row = 0;
        // get the current Student
        Student tempStudent = null;
        try {
            tempStudent = (Student) table.getValueAt(row, StudentTableModel.OBJECT_COL);
            // get values
            txtQuickPane.setText(tempStudent.getSummary());
        } catch (Exception e) {
            txtQuickPane.setText("<html><font  size=\"4\" color=\"red\"><center>No  records!</center></font>");
        }

    }

    public void setUpdateButtonDisable() {
        this.btnUpdateContact.setEnabled(false);
    }

    public void setCertificateButtonDisable() {
        this.btnCertificate.setEnabled(false);
    }

    public void setAddButtonDisable() {
        this.btnNewContact.setEnabled(false);
    }

    public void setDeleteButtonDisable() {
        this.btnDeleteContact.setEnabled(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        //</editor-fold>
        try {
            UIManager.setLookAndFeel(new AcrylLookAndFeel());
        } catch (Exception e) {
            e.printStackTrace();
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentViewer(5).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCertificate;
    private javax.swing.JButton btnDeleteContact;
    private javax.swing.JButton btnNewContact;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdateContact;
    private javax.swing.JComboBox comboPara;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable table;
    private javax.swing.JEditorPane txtQuickPane;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
